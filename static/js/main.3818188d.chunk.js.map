{"version":3,"sources":["components/LinkContainer/LinkContainer.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["LinkContainer","props","count","getResources","randomString","replace","c","r","Math","random","toString","title","today","Date","getFullYear","getMonth","getDate","todayDate","description","subject","collection","creator","guid","Array","fill","map","x","resource","url","generateLink","style","href","Home","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAEe,SAASA,EAAcC,GAUlC,IAuCuBC,EAlCjBC,EAAe,WACjB,IAAMC,EAZC,uCAAuCC,QAAQ,SAAS,SAAUC,GACrE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OADyC,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACrDG,SAAS,OAkBtB,MAAO,CACHC,MAfQ,WACZ,IAAIC,EAAQ,IAAIC,KAChB,OAAOD,EAAME,cAAgB,KAAOF,EAAMG,WAAa,GAAK,IAAMH,EAAMI,UAKtDA,GACJC,UAAuCb,EAQjDc,YAPgBd,EAQhBe,QAPYf,EAQZgB,WAPe,oBAQfC,QA5Ba,QA6BbC,KARSlB,IA+BjB,OACI,8BALmBF,EAOG,EANfqB,MAAMrB,GAAOsB,KAAK,GAAGC,KAAI,SAAAC,GAAC,OAhBhB,WACjB,IAAIC,EAAWxB,IACXyB,EAAG,8BAMP,MAAO,CACHA,IAFJA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAM,UAAUD,EAAShB,OACnB,gBAAgBgB,EAAST,aACzB,YAAcS,EAASR,SACvB,YAAcQ,EAASN,SACvB,eAAiBM,EAASP,WAGlCE,KAAOK,EAASL,MAMiBO,OAMZJ,KAAI,SAAAC,GAAC,OAAI,yBAAKI,MAAO,CAAC,QAAY,QAAQ,uBAAGC,KAAML,EAAEE,KAAMF,EAAEJ,WCvD/E,SAASU,EAAK/B,GAGzB,OACI,yBAAKgC,UAAU,QACZ,6CAIC,kBAACjC,EAAD,OCAGkC,MARf,WACE,OACE,yBAAKD,UAAU,OACb,kBAACD,EAAD,QCKcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3818188d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function LinkContainer(props) {\r\n    const PREFIX_TITLE = \"tmp0x\"\r\n\r\n    function uuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    const getDate = () => {\r\n        let today = new Date();\r\n        return today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\r\n    }\r\n\r\n    const getResources = () => {\r\n        const randomString = uuid();\r\n        const todayDate = getDate();\r\n        const title = todayDate + \"-\" + PREFIX_TITLE + \"-\" + randomString;\r\n        const description = randomString;\r\n        const subject = randomString;\r\n        const collection = \"opensource_movies\";\r\n        const guid = randomString;\r\n        const creator = PREFIX_TITLE;\r\n        return {\r\n            title, \r\n            description,\r\n            subject,\r\n            collection,\r\n            creator,\r\n            guid\r\n        }\r\n    }\r\n\r\n    const generateLink = () => {\r\n        let resource = getResources();\r\n        let url = `https://archive.org/upload/`;\r\n        url = url + \"?title=\"+resource.title;\r\n        url = url + \"&description=\"+resource.description;\r\n        url = url + \"&subject=\" + resource.subject;\r\n        url = url + \"&creator=\" + resource.creator;\r\n        url = url + \"&collection=\" + resource.collection;\r\n        return {\r\n            url : url,\r\n            guid : resource.guid\r\n        }\r\n        return url;\r\n    }\r\n\r\n    const generateLinks = (count) => {\r\n        return Array(count).fill(0).map(x => generateLink())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                generateLinks(4).map(x => <div style={{\"padding\" : \"5px\"}}><a href={x.url}>{x.guid}</a></div>)\r\n            }               \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport LinkContainer from '../LinkContainer/LinkContainer';\r\n\r\nexport default function Home(props){\r\n\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n           <div>\r\n               Archive Link\r\n           </div>\r\n\r\n            <LinkContainer />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}